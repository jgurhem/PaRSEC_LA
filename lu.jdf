extern "C" %{

#include <stdlib.h>
#include <string.h>

#include "parsec.h"
#include "parsec/runtime.h"
#include "parsec/data_internal.h"
#include "parsec/execution_stream.h"
#include "parsec/data_dist/matrix/two_dim_rectangle_cyclic.h"
#include "parsec/utils/debug.h"


void pmm_core(double *A, double *B, int size) {
    int i, j, k;

    double *tmp;
    tmp = (double *)malloc(size * size * sizeof(double));

    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            tmp[i * size + j] = 0;
            for (k = 0; k < size; k++) {
                tmp[i * size + j] += A[i * size + k] * B[k * size + j];
            }
        }
    }

    memcpy(A, tmp, size * size * sizeof(double));
    free(tmp);
}

void pmm_d_core(double *A, double *B, double *C, int size) {
    int i, j, k;
    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            for (k = 0; k < size; k++) {
                C[i * size + j] -= A[i * size + k] * B[k * size + j];
            }
        }
    }
}

void inv_core(double *Ain, double *B, int size) {
    int i, j, k;
    double temp;
    double *A;
    A = malloc(size * size *sizeof(double));
    memcpy(A, Ain, size * size *sizeof(double));

    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            if (j == i)
                B[i * size + i] = 1.000;
            else
                B[i * size + j] = 0.000;
        }
    }

    for (k = 0; k < size; k++) {
        temp = A[k * size + k];
        for (j = 0; j < size; j++) {
            A[k * size + j] /= temp;
            B[k * size + j] /= temp;
        }

        for (i = 0; i < k; i++) {
            temp = A[i * size + k];
            for (j = 0; j < size; j++) {
                A[i * size + j] -= temp * A[k * size + j];
                B[i * size + j] -= temp * B[k * size + j];
            }
        }
        for (i = k + 1; i < size; i++) {
            temp = A[i * size + k];
            for (j = 0; j < size; j++) {
                A[i * size + j] -= temp * A[k * size + j];
                B[i * size + j] -= temp * B[k * size + j];
            }
        }
    }
    free(A);
}

%}

dcA     [ type="two_dim_block_cyclic_t*" ]
bm      [ type="int" ]


loadA(i)

i = 1 .. bm - 1

: dcA(0, i)

RW     A <- dcA(0, i)
         -> Akj PMM_D(1 .. bm - 1, i, 1)

BODY
{
    printf("loadA %d %d\n", i, 0);
}
END


Inv(k)

k = 0 .. bm - 2

: dcA(k, k)

READ   A <- (k == 0) ? dcA(k, k) : Aij PMM_D(k, k, k)
WRITE  Inv -> Inv PMM(k + 1 .. bm - 1, k)

BODY
{
    printf("inv %d (inv-%d)\n", k, k);
    double *A_ = (double *)A;
    double *B_ = (double *)Inv;
    inv_core(A_, B_, dcA->super.mb);
}
END


PMM(i, k)

k = 0 .. bm - 2
i = k + 1 .. bm - 1

: dcA(i, k)

RW     A <- (k == 0) ? dcA(i, k) : Aij PMM_D(i, k, k)
         -> Aik PMM_D(i, k + 1 .. bm - 1, k + 1)
READ   Inv <- Inv Inv(k)

BODY
{
    printf("pmm i = %d, k = %d (A-%d-%d-%d)\n", i, k, i, k, k + 1);

    double *A_ = (double *)A;
    double *B_ = (double *)Inv;
    pmm_core(A_, B_, dcA->super.mb);

}
END


PMM_D(i, j, k)

k = 1 .. bm - 1
i = k .. bm - 1
j = k .. bm - 1

: dcA(i, j)

READ   Aik <- A PMM(i, k - 1)
READ   Akj <- (k == 1) ? A loadA(j) : Aij PMM_D(k - 1, j, k - 1)
RW     Aij <- (k == 1) ? dcA(i, j) : Aij PMM_D(i, j, k - 1)
           -> (i == k && j == k) ? A Inv(k)
           -> (i == k && j > k) ? Akj PMM_D(k + 1 .. bm - 1, j, k + 1)
           -> (i > k && j == k) ? A PMM(i, j)
           -> (i > k && j > k) ? Aij PMM_D(i, j, k + 1)

BODY
{
    printf("pmm_d i = %d, j = %d, k = %d (A-%d-%d-%d)\n", i, j, k, i, j, k);

    double *A_ = (double *)Aik;
    double *B_ = (double *)Akj;
    double *C_ = (double *)Aij;
    pmm_d_core(A_, B_, C_, dcA->super.mb);

}
END


extern "C" %{

int main(int argc, char *argv[])
{
    parsec_context_t* parsec;
    parsec_taskpool_t* op;
    two_dim_block_cyclic_t dcA;
    parsec_lu_taskpool_t *tp;
    int cores = -1, world = 1, rank = 0;
    int mb = 20;
    int lm = 100;
    int bm = lm / mb;
    int rows = 1, rc;

#if defined(PARSEC_HAVE_MPI)
    {
        int provided;
        MPI_Init_thread(&argc, &argv, MPI_THREAD_SERIALIZED, &provided);
    }
    MPI_Comm_size(MPI_COMM_WORLD, &world);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
#endif

    parsec = parsec_init(cores, &argc, &argv);

    two_dim_block_cyclic_init( &dcA, matrix_RealDouble, matrix_Tile,
                               world, rank, mb, mb, lm, lm, 0, 0, lm, lm, 1, 1, rows );
    dcA.mat = parsec_data_allocate((size_t)dcA.super.nb_local_tiles *
                                     (size_t)dcA.super.bsiz *
                                     (size_t)parsec_datadist_getsizeoftype(dcA.super.mtype));
    parsec_data_collection_set_key(&dcA.super.super, "A");

    tp = parsec_lu_new(&dcA, bm);
    parsec_matrix_add2arena( tp->arenas[PARSEC_lu_DEFAULT_ARENA], parsec_datatype_float_t,
                             matrix_UpperLower, 1, dcA.super.mb, dcA.super.nb, dcA.super.mb,
                             PARSEC_ARENA_ALIGNMENT_SSE, -1 );

    rc = parsec_context_add_taskpool(parsec, (parsec_taskpool_t *) tp);
    PARSEC_CHECK_ERROR(rc, "parsec_context_add_taskpool");

    rc = parsec_context_start(parsec);
    PARSEC_CHECK_ERROR(rc, "parsec_context_start");
    rc = parsec_context_wait(parsec);
    PARSEC_CHECK_ERROR(rc, "parsec_context_wait");

    PARSEC_INTERNAL_TASKPOOL_DESTRUCT(tp);

    parsec_fini(&parsec);
#if defined(PARSEC_HAVE_MPI)
    MPI_Finalize();
#endif

    return 0;
}

%}
